var CACHE_VERSION = '<%=Time.now.to_i %>';
var CACHE_NAME = CACHE_VERSION + ':sw-cache-';
var CACHE_PATHS = ['/'];

function onInstall(event) {
  console.log('[Serviceworker]', "Installing!", event);
  event.waitUntil(
    caches.open(CACHE_NAME).then(function prefill(cache) {
      return cache.addAll([
        // make sure serviceworker.js is not required by application.js
        // if you want to reference application.js from here
        '<%= asset_path "application.js" %>',
        '<%= asset_path "application.css" %>',
        '<%= asset_path "clap.svg" %>',
        '<%= asset_path "clap_hover.svg" %>',
        '/offline.html',
        '/login'
      ]);
    })
  );
}

function onActivate(event) {
  console.log('[Serviceworker]', "Activating!", event);
  event.waitUntil(
      caches.keys().then(function(cacheNames) {
        return Promise.all(
            cacheNames.filter(function(cacheName) {
              return cacheName.indexOf(CACHE_VERSION) !== 0;
            }).map(function(cacheName) {
              return caches.delete(cacheName);
            })
        );
      })
  );
}

function onFetch(event) {
  event.respondWith(
      // try to return untouched request from network first
      fetch(event.request).then(function (response) {
        var requestUrl = new URL(event.request.url)
        CACHE_PATHS.forEach(function (path) {
          if (requestUrl.pathname === path) {
            var cloneResponse = response.clone();
            caches.open(CACHE_NAME).then(function (cache) {
              cache.put(event.request.url, cloneResponse);
              return response;
            })
            return response;
          }
        });
        return response;
      }).catch(function() {
        // if it fails, try to return request from the cache
        return caches.match(event.request).then(function(response) {
          if (response) {
            return response;
          }
          // if not found in cache, return default offline content for navigate requests
          if (event.request.mode === 'navigate' ||
              (event.request.method === 'GET'
                  && event.request.headers.get('accept').includes('text/html'))) {
            console.log('[Serviceworker]', "Fetching offline content", event);
            return caches.match('/offline.html');
          }
        })
      })
  );
}

self.addEventListener('install', onInstall);
self.addEventListener('activate', onActivate);
self.addEventListener('fetch', onFetch);
